//
// Copyright (c) 2019-2020 Red Hat, Inc.
// This program and the accompanying materials are made
// available under the terms of the Eclipse Public License 2.0
// which is available at https://www.eclipse.org/legal/epl-2.0/
//
// SPDX-License-Identifier: EPL-2.0
//
// Contributors:
//   Red Hat, Inc. - initial API and implementation
//

package cert

import (
	"fmt"

	"github.com/devfile/devworkspace-operator/webhook/server"
	crclient "sigs.k8s.io/controller-runtime/pkg/client"
)

//GetWebhookCfgCA returns patch pieces to inject CA into webhook configuration.
// it may be done with annotation to let cluster service inject CA automatically
// or provide CA manually if it's generated by job or by user once
func GetWebhookCfgCA(client crclient.Client, namespace string, existingCA []byte) (CABundle []byte, annotations map[string]string, err error) {
	isCertManagerUsed, err := isCertManagerSecret(client, server.WebhookServerTLSSecretName, namespace)
	if err != nil {
		return nil, nil, err
	}

	if isCertManagerUsed {
		webhookAnnotations := make(map[string]string)
		webhookAnnotations[CertManagerInjectKeyAnnotation] = fmt.Sprintf("%s/%s", namespace, WebhookServerCertManagerCertificateName)
		return existingCA, webhookAnnotations, nil
	}

	//TODO investigate if we can make OpenShift inject CA into webhook cfg with annotations instead of providing read secret content.

	return server.CABundle, nil, nil
}
